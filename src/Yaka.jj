/*
 *
 *       Auteur: Pedrono Marie-Jo
 *
 * 	cr�ation : 13 f�vrier 2002
 *
 *     nature : projet etudiant
 *
 */


options{
	JDK_VERSION="1.5";	
}

PARSER_BEGIN(Yaka)



public class Yaka implements Constante {
	
	public static Declaration declaration;
	public static TabIdent tabIdent;
	public static Expression expression;
	public static YVMasm yvm;

  public static void main(String args[]) { 
    Yaka analyseur;
    java.io.InputStream input;
    tabIdent = new TabIdent();
    expression = new Expression(tabIdent);
    declaration = new Declaration(tabIdent);
    
    if (args.length==1) {
      System.out.print(args[args.length-1] + ": ");
      try {
        input = new java.io.FileInputStream(args[args.length-1]+".yaka");
        yvm = new YVMasm(args[args.length-1]+".asm");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable.");
        return;
      }
    } else if (args.length==0) {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
    } else {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try {
      analyseur = new Yaka(input);
      analyseur.prog();
      yvm.fermer();
      System.out.println("analyse syntaxique reussie!");
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\n"));
      System.out.println("Erreur de syntaxe : "+msg);
    }
  } 
}

PARSER_END(Yaka)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{public static String identLu,chaineLue;
 public static int entierLu;}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots r�serv�s*/

TOKEN :
{
  < BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENTIER: "ENTIER" >
| < RETOURNE: "RETOURNE" >
| < VRAI: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME: "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">

}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Integer.parseInt(image.toString());
        }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();	
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void prog() : {}
{
   <PROGRAMME> {yvm.entete();}
   <ident>	
   bloc()
   <FPROGRAMME> {yvm.queue(); System.out.println(declaration);}
}

void bloc() : {}{
 (declConst())*
 (declVar())* {yvm.ouvrePrinc(declaration.offset / -2);}
   suiteExpr() 
}

void declConst() : {}
{
  <CONST>  defConst() ( "," defConst())* ";"
}

void defConst() : {}
{
	
  <ident> { declaration.setLastIdent(YakaTokenManager.identLu); }
   "=" valConst()
    
}

void valConst() : {}{
  <entier> { declaration.createConstInt(YakaTokenManager.entierLu, token.beginLine); }
 | <ident> { declaration.createConstVar(YakaTokenManager.identLu, token.beginLine); }
 | <VRAI>  { declaration.createConstBool(TRUE, token.beginLine); }
 | <FAUX>  { declaration.createConstBool(FALSE, token.beginLine); }
}


void declVar() : {}
{
  <VAR> type()
  <ident> { declaration.createVar(YakaTokenManager.identLu, token.beginLine); }
  ("," 
      <ident> { declaration.createVar(YakaTokenManager.identLu, token.beginLine); }
  )* ";"
	
}

void type() :{}
{
   <ENTIER>  { declaration.setLastType(eType.ENTIER); }
 | <BOOLEEN> { declaration.setLastType(eType.BOOLEEN); }
}
/*
 * Syntaxe des instructions.
 */
void suiteExpr() : {}
{ 
	(expression() (";" (expression())? )*)? 
}



/*
 * Expression .
 */
void expression() : {}
{
  simpleExpr() 
  (opRel() 
  simpleExpr() {expression.evaluation(token.beginLine);}
  )?
}



void simpleExpr() : {}
{
   terme() 
   (opAdd() 
   terme(){expression.evaluation(token.beginLine);}
   )*
} 
void terme() : {}
{
  facteur() 
  (opMul() 
  facteur(){expression.evaluation(token.beginLine);}
  )*
}
void facteur() : {}
{   primaire() 
  |  opNeg() primaire() {expression.evaluation(token.beginLine);}
}

void primaire (): {}
{
   valeur()
 | "(" expression() ")" 
 
}

void valeur () : {}
{ <entier>  { expression.ajoutType(eType.ENTIER); yvm.iconst(YakaTokenManager.entierLu); }
 | <ident>  { expression.ajoutTypeFromVar(YakaTokenManager.identLu, token.beginLine); }
 | <VRAI>   { expression.ajoutType(eType.BOOLEEN); }
 | <FAUX>   { expression.ajoutType(eType.BOOLEEN); }
 
}

void opRel() : {}
{
   "=" 		 { expression.ajoutOp(eOperande.EGAL); }
 | "<>" 	 { expression.ajoutOp(eOperande.DIFF); }
 | "<" 		 { expression.ajoutOp(eOperande.INF); }
 | "<=" 	 { expression.ajoutOp(eOperande.INFEGAL); }
 | ">" 		 { expression.ajoutOp(eOperande.SUP); }
 | ">=" 	 { expression.ajoutOp(eOperande.SUPEGAL); }
} 

void opAdd() : {}
{
    "+"		 { expression.ajoutOp(eOperande.PLUS); }
  |  "-"     { expression.ajoutOp(eOperande.MOINS); }
  | <OU> 	 { expression.ajoutOp(eOperande.OU); }
}

void opMul() : {}
{
  "*"		 { expression.ajoutOp(eOperande.MULTIPLIER); }
  | "/"		 { expression.ajoutOp(eOperande.DIVISER); }
  | <ET>	 { expression.ajoutOp(eOperande.ET); }
} 

void opNeg() : {}
{ "-"        { expression.ajoutOp(eOperande.NEG); }
 | <NON>     { expression.ajoutOp(eOperande.NOT); }
}


