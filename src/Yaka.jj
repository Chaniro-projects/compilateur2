options {
	JDK_VERSION = "1.5";	
}

PARSER_BEGIN(Yaka)
import java.io.*;

public class Yaka implements Constante {
	public static TabIdent tabIdent = new TabIdent();
	public static Declaration declaration = new Declaration();
	public static Expression expression = new Expression();
	public static Affectation affectation = new Affectation();
	public static EntreeSortie entreeSortie = new EntreeSortie();
	public static Iteration iteration = new Iteration();
	public static Condition condition = new Condition();
	public static Fonction = fonction = new Fonction();
	public static YVMasm yvm;

	public static void main(String args[]) {
		Yaka analyseur;
		InputStream input;

		if (args.length == 1) {
			System.out.print(args[args.length - 1] + ": ");
			try {
				input = new FileInputStream(args[args.length-1] + ".yaka");
				yvm = new YVMasm(args[args.length-1] + ".asm");
			} catch (FileNotFoundException e) {
				System.out.println("Fichier introuvable.");
				return;
			}
		}
		else if (args.length == 0) {
			System.out.println("Lecture sur l'entree standard...");
			input = System.in;
		}
		else {
			System.out.println("Usage: java Yaka [fichier]");
			return;
		}
		
		try {
			analyseur = new Yaka(input);
			analyseur.analyse();
			yvm.fermer();
			System.out.println("Analyse syntaxique réussie !");
		} catch (ParseException e) {
			String message = e.getMessage();
			message = message.substring(0, message.indexOf("\n"));
			System.out.println("Erreur de syntaxe : " + message);
		}
	} 
}
PARSER_END(Yaka)


TOKEN_MGR_DECLS : {
	public static String identLu;
	public static String chaineLue;
	public static int entierLu;
}


SKIP : {
	" "
|	"\t"
|	"\n"
|	"\r"
|	"(*" : IN_COMMENT
}
<IN_COMMENT> MORE : {
	<~[]>
}
<IN_COMMENT> SKIP : {
	<"*)">  { SwitchTo(DEFAULT); } 
}




TOKEN : {
	<BOOLEEN : "BOOLEEN">
|	<VAR : "VAR">
|	<FAIRE : "FAIRE">
|	<SINON : "SINON">
|	<POUR : "POUR">
|	<SI : "SI">
|	<FSI : "FSI">
|	<ENTIER : "ENTIER">
|	<RETOURNE : "RETOURNE">
|	<VRAI : "VRAI">
|	<TANTQUE : "TANTQUE">
|	<CONST : "CONST">
|	<FAUX : "FAUX">
|	<FAIT : "FAIT">
|	<OU : "OU">
|	<ET : "ET">
|	<NON : "NON">
|	<FONCTION : "FONCTION">
|	<FFONCTION  : "FFONCTION">
|	<PROGRAMME : "PROGRAMME">
|	<FPROGRAMME : "FPROGRAMME">
|	<PRINCIPAL : "PRINCIPAL">
|	<FPRINCIPAL : "FPRINCIPAL">
|	<ALORS : "ALORS">
|	<ECRIRE : "ECRIRE">
|	<LIRE : "LIRE">
|	<ALALIGNE : "ALALIGNE">
}

TOKEN : {
	<#chiffre : ["0" - "9"]>
|	<entier : (<chiffre>)+> { entierLu = Integer.parseInt(image.toString()); }
|	<#lettre : ["A" - "Z", "a" - "z"]>
|	<ident : <lettre> (<lettre> | <chiffre>)*> { identLu = image.toString(); }
|	<chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'"> { chaineLue = image.toString(); }
}




void analyse() :{} {
	<PROGRAMME> { yvm.entete(); }
	<ident>
	(declFonction())*
	<PRINCIPAL>
	bloc()
	<FPRINCIPAL>
	<FPROGRAMME> { yvm.queue(); }
}

void declFonction() :{} {
	type()
	<FONCTION>
	<ident> { fonction.setFonctionCourante(YakaTokenManager.identLu); }
	paramForms()
	bloc()
	<FFONCTION>
}

void paramForms() :{} {
	"("
	(
	  	paramForm()
	  	("," paramForm())*
	)?
	")"
}

void paramForm() :{} {
	type()
	<ident>
}

void bloc() :{} {
	(declConst())*
	(declVar())* { yvm.ouvrePrinc(declaration.getVariable()); }
	suiteInstr()
}

void declConst() :{} {
	<CONST>
	defConst()
	("," defConst())*
	";"
}

void defConst() :{} {
	<ident> { declaration.setLastIdent(YakaTokenManager.identLu); }
	"="
	valConst()
}

void valConst() :{} {
	<entier> { declaration.createConstInt(YakaTokenManager.entierLu); }
|	<ident> { declaration.createConstIdent(YakaTokenManager.identLu); }
|	<VRAI> { declaration.createConstBool(TRUE); }
|	<FAUX> { declaration.createConstBool(FALSE); }
}

void declVar() :{} {
	<VAR>
	type()
	<ident> { declaration.createVar(YakaTokenManager.identLu); }
	("," <ident> { declaration.createVar(YakaTokenManager.identLu); })*
	";"
}

void type() :{} {
	<ENTIER> { declaration.setLastType(eType.ENTIER); fonction.setFonctionCouranteType(eType.ENTIER); }
|	<BOOLEEN> { declaration.setLastType(eType.BOOLEEN); fonction.setFonctionCouranteType(eType.BOOLEEN); }
}

void suiteInstr() :{} {
	(instruction()
	(";" (instruction())?)*)?
}

void instruction() :{} {
	affectation()
|	iteration()
|	condition()
|	lecture()
|	ecriture()
|	retourne()
}

void affectation() :{} {
	<ident> { affectation.setIdentAffectation(YakaTokenManager.identLu); } 
	"="
	expression() { affectation.affectation(); }
}

void iteration() :{} {
	<TANTQUE> { iteration.faire(); }
	expression() { iteration.verifierExpression(); }
	<FAIRE>
	suiteInstr() { iteration.igoto(); }
	<FAIT> { iteration.fait(); }
}

void condition() :{} {
	<SI> { condition.si(); }
	expression() { condition.verifierExpression(); }
	<ALORS>
	suiteInstr() { condition.igoto(); condition.sinon(); }
	(
	  	<SINON> 
	  	suiteInstr()
	)?
	<FSI> { condition.fsi(); }
}

void lecture() :{} {
	<LIRE>
	"("
	<ident> { entreeSortie.lire(YakaTokenManager.identLu); }
	")"
}

void ecriture() :{} {
	<ECRIRE>
	"("
	(
	  	expression() { entreeSortie.ecrire(); }
	  |	<chaine> { entreeSortie.ecrire(YakaTokenManager.chaineLue); }
	)
	")"
|	<ALALIGNE> { entreeSortie.aLaLigne(); }
}

void retourne() :{} {
	<RETOURNE>
	expression()
} 

void expression() :{} {
	simpleExpr()
	(opRel() simpleExpr() { expression.evaluation(); })?
}

void simpleExpr() :{} {
	terme()
	(opAdd() terme() { expression.evaluation(); })*
}

void terme() :{} {
	facteur()
	(opMul() facteur() { expression.evaluation(); })*
}

void facteur() :{} {
	primaire()
|	opNeg()
	primaire() { expression.evaluation(); }
}

void primaire() :{} {
	valeur()
|	"("
	expression()
	")"
}

void valeur() :{} {
	<entier> 						{ expression.ajoutType(eType.ENTIER, YakaTokenManager.entierLu); }
|	<ident> (argumentsFonction())* 	{ expression.ajoutTypeFromVar(YakaTokenManager.identLu); }
|	<VRAI> 							{ expression.ajoutType(eType.BOOLEEN, TRUE); }
|	<FAUX> 							{ expression.ajoutType(eType.BOOLEEN, FALSE); }
}

void argumentsFonction() :{} {
	"("
	(
	  	expression()
	  	("," expression())*
	)?
	")"
}

void opRel() :{} {
	"=" { expression.ajoutOperateur(eOperande.EGAL); }
|	"<>" { expression.ajoutOperateur(eOperande.DIFF); }
|	"<" { expression.ajoutOperateur(eOperande.INF); }
|	"<=" { expression.ajoutOperateur(eOperande.INFEGAL); }
|	">" { expression.ajoutOperateur(eOperande.SUP); }
|	">=" { expression.ajoutOperateur(eOperande.SUPEGAL); }
} 

void opAdd() :{} {
	"+" { expression.ajoutOperateur(eOperande.ADD); }
|	"-" { expression.ajoutOperateur(eOperande.SUB); }
|	<OU> { expression.ajoutOperateur(eOperande.OR); }
}

void opMul() :{} {
	"*" { expression.ajoutOperateur(eOperande.MUL); }
|	"/" { expression.ajoutOperateur(eOperande.DIV); }
|	<ET> { expression.ajoutOperateur(eOperande.AND); }
} 

void opNeg() :{} {
	"-" { expression.ajoutOperateur(eOperande.NEG); }
|	<NON> { expression.ajoutOperateur(eOperande.NOT); }
}